generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model User {
    id                String    @id @default(cuid())
    name              String?
    email             String?   @unique
    password          String
    emailVerified     DateTime?
    image             String?
    phoneNumber       String?   @unique
    username          String?   @unique
    firstName         String?
    lastName          String?
    bio               String?   @db.Text
    lastSeen          DateTime  @default(now())
    createdAt         DateTime  @default(now())
    updatedAt         DateTime  @updatedAt
    accounts          Account[]
    sessions          Session[]
    sentMessages      Message[] @relation("SentMessages")
    receivedMessages  Message[] @relation("ReceivedMessages")
    initiatedChats    Chat[]    @relation("ChatInitiator")
    participatedChats Chat[]    @relation("ChatParticipant")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    id String @id @default(cuid())

    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Chat {
    id            String    @id @default(cuid())
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    initiator     User      @relation("ChatInitiator", fields: [initiatorId], references: [id])
    initiatorId   String
    participant   User      @relation("ChatParticipant", fields: [participantId], references: [id])
    participantId String
    messages      Message[]

    @@unique([initiatorId, participantId])
}

model Message {
    id         String        @id @default(cuid())
    content    String        @db.Text
    createdAt  DateTime      @default(now())
    updatedAt  DateTime      @updatedAt
    sender     User          @relation("SentMessages", fields: [senderId], references: [id])
    senderId   String
    receiver   User          @relation("ReceivedMessages", fields: [receiverId], references: [id])
    receiverId String
    chat       Chat          @relation(fields: [chatId], references: [id])
    chatId     String
    status     MessageStatus
    type       MessageType
}

enum MessageStatus {
    SENT
    DELIVERED
    READ
}

enum MessageType {
    TEXT
    IMAGE
    VIDEO
    AUDIO
    FILE
}
